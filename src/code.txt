api key
ebfffd8880333dd7775a29f2ecbe5872

import { createApp, ref } from 'vue'
import { createRouter, createWebHistory } from 'vue-router'

// 영화 데이터 (실제 서비스에서는 API 연동 필요)
const movieData = [
  {
    id: 1,
    title: '인셉션',
    description: '꿈 속의 꿈을 조작하는 도둑들의 이야기',
    genre: '과학 액션',
    year: 2010,
    rating: 4.8,
    thumbnailUrl: '/api/placeholder/300/200',
    videoUrl: '/sample-video.mp4'
  },
  {
    id: 2,
    title: '기생충',
    description: '경계를 넘나드는 두 가족의 기묘한 동거',
    genre: '드라마',
    year: 2019,
    rating: 4.9,
    thumbnailUrl: '/api/placeholder/300/200',
    videoUrl: '/sample-video.mp4'
  }
]

// 회원 관리 컴포넌트
const AuthComponent = {
  setup() {
    const users = ref(JSON.parse(localStorage.getItem('users') || '[]'))
    const currentUser = ref(JSON.parse(localStorage.getItem('currentUser') || 'null'))
    const email = ref('')
    const password = ref('')
    const name = ref('')

    const register = () => {
      if (!email.value || !password.value || !name.value) {
        alert('모든 필드를 입력해주세요.')
        return
      }

      const existingUser = users.value.find(u => u.email === email.value)
      if (existingUser) {
        alert('이미 존재하는 이메일입니다.')
        return
      }

      const newUser = {
        id: Date.now(),
        name: name.value,
        email: email.value,
        password: password.value
      }

      users.value.push(newUser)
      localStorage.setItem('users', JSON.stringify(users.value))
      alert('회원가입 성공!')

      // 필드 초기화
      email.value = ''
      password.value = ''
      name.value = ''
    }

    const login = () => {
      const user = users.value.find(
        u => u.email === email.value && u.password === password.value
      )

      if (user) {
        currentUser.value = user
        localStorage.setItem('currentUser', JSON.stringify(user))
        alert('로그인 성공!')
        window.location.href = '/movies'
      } else {
        alert('이메일 또는 비밀번호가 잘못되었습니다.')
      }
    }

    const logout = () => {
      currentUser.value = null
      localStorage.removeItem('currentUser')
      window.location.href = '/'
    }

    return {
      users,
      currentUser,
      email,
      password,
      name,
      register,
      login,
      logout
    }
  },
  template: `
    <div class="auth-container">
      <div v-if="!currentUser" class="login-form">
        <h2>로그인</h2>
        <input v-model="email" type="email" placeholder="이메일" />
        <input v-model="password" type="password" placeholder="비밀번호" />
        <button @click="login">로그인</button>

        <h2>회원가입</h2>
        <input v-model="name" type="text" placeholder="이름" />
        <input v-model="email" type="email" placeholder="이메일" />
        <input v-model="password" type="password" placeholder="비밀번호" />
        <button @click="register">회원가입</button>
      </div>
      <div v-else class="user-info">
        <p>{{ currentUser.name }}님 환영합니다!</p>
        <button @click="logout">로그아웃</button>
      </div>
    </div>
  `
}

// 영화 목록 컴포넌트
const MovieListComponent = {
  setup() {
    const currentUser = ref(JSON.parse(localStorage.getItem('currentUser') || 'null'))
    const movies = ref(movieData)

    if (!currentUser.value) {
      window.location.href = '/'
    }

    return { movies }
  },
  template: `
    <div class="movie-list">
      <h1>영화 목록</h1>
      <div class="movie-grid">
        <div v-for="movie in movies" :key="movie.id" class="movie-card">
          <img :src="movie.thumbnailUrl" :alt="movie.title" />
          <div class="movie-details">
            <h3>{{ movie.title }}</h3>
            <p>{{ movie.description }}</p>
            <span>장르: {{ movie.genre }}</span>
            <span>개봉년도: {{ movie.year }}</span>
            <span>평점: {{ movie.rating }}</span>
            <a :href="\`/movie/\${movie.id}\`" class="watch-btn">Watch Now</a>
          </div>
        </div>
      </div>
    </div>
  `
}

// 영화 상세 페이지 컴포넌트
const MovieDetailComponent = {
  setup(props) {
    const currentUser = ref(JSON.parse(localStorage.getItem('currentUser') || 'null'))
    const movie = ref(movieData.find(m => m.id === parseInt(props.id)))

    if (!currentUser.value) {
      window.location.href = '/'
    }

    return { movie }
  },
  props: ['id'],
  template: `
    <div v-if="movie" class="movie-detail">
      <video controls>
        <source :src="movie.videoUrl" type="video/mp4" />
      </video>
      <div class="movie-info">
        <h1>{{ movie.title }}</h1>
        <p>{{ movie.description }}</p>
        <div class="movie-meta">
          <span>장르: {{ movie.genre }}</span>
          <span>개봉년도: {{ movie.year }}</span>
          <span>평점: {{ movie.rating }}</span>
        </div>
      </div>
    </div>
  `
}

// 라우터 설정
const routes = [
  { path: '/', component: AuthComponent },
  { path: '/movies', component: MovieListComponent },
  { path: '/movie/:id', component: MovieDetailComponent, props: true }
]

const router = createRouter({
  history: createWebHistory(),
  routes
})

// 앱 생성
const app = createApp({
  template: `
    <div id="app">
      <router-view></router-view>
    </div>
  `
})

app.use(router)
app.mount('#app')

// CSS 스타일링
const styles = `
<style>
body {
  font-family: Arial, sans-serif;
  background-color: #121212;
  color: white;
  margin: 0;
  padding: 0;
}

.auth-container, .movie-list, .movie-detail {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
}

input {
  display: block;
  width: 100%;
  margin: 10px 0;
  padding: 10px;
  background-color: #333;
  color: white;
  border: none;
}

button {
  background-color: #e50914;
  color: white;
  border: none;
  padding: 10px 20px;
  margin: 10px 0;
  cursor: pointer;
}

.movie-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  gap: 20px;
}

.movie-card {
  background-color: #222;
  border-radius: 5px;
  overflow: hidden;
}

.movie-card img {
  width: 100%;
  height: 300px;
  object-fit: cover;
}

.movie-details {
  padding: 15px;
}

.watch-btn {
  display: block;
  background-color: #e50914;
  color: white;
  text-align: center;
  padding: 10px;
  text-decoration: none;
}

video {
  width: 100%;
  max-height: 600px;
}
</style>
`

document.head.insertAdjacentHTML('beforeend', styles)

export default app